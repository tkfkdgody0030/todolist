{"version":3,"sources":["apis/SDK.js","apis/IconexConnect.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["provider","HttpProvider","window","PROVIDER_URL","iconService","IconService","CallBuilder","IconBuilder","CallTransactionBuilder","SDK","callBuild","_ref","arguments","length","undefined","from","methodName","to","_ref$params","params","method","build","sendTxBuild","_ref2","_ref2$params","_ref2$networkId","networkId","NID","_ref2$stepLimit","stepLimit","_ref2$value","value","jsonrpc","nid","timestamp","concat","Date","getTime","toString","version","id","IconexConnect","getAddress","Promise","resolve","addEventListener","eventHandler","event","_event$detail","detail","type","payload","removeEventListener","dispatchEvent","CustomEvent","sendTransaction","_event$detail2","result","constants","MODE","LOG_OUT","LOG_IN","BDAY_SET","LABEL","label","Header","Content","hexToBytes","hex","bytes","c","push","parseInt","substr","stringFromUTF8Array","data","extraByteMap","count","str","index","ch","extra","chx","String","fromCharCode","convertList","myData","converted","j","App","_useState","useState","CONST","_useState2","Object","slicedToArray","setMode","_useState3","_useState4","memoInput","setMemoInput","_useState5","_useState6","memoList","setmemoList","_useState7","_useState8","myAddress","setMyAddress","_useState9","BDay","_useState10","_getAddress","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","sent","console","log","call","CONTRACT_ADDRESS","execute","stop","apply","this","_addMemo","_callee2","txObj","_context2","alert","abrupt","trim","toConsumableArray","_hack","IconConverter","fromUtf8","react_default","createElement","layout","es_button","defineProperty","size","onClick","row","justify","align","className","col","span","style","color","fontWeight","textAlign","input","width","onChange","e","target","fontSize","margin","maxWidth","map","item","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07fc4aec.chunk.js","sourcesContent":["import IconService, {\n  HttpProvider,\n  IconBuilder,\n} from 'icon-sdk-js'\nimport config from '../config'\n\nconst provider = new HttpProvider(window.PROVIDER_URL)\nconst iconService = new IconService(provider)\n\nconst {\n  CallBuilder,\n  CallTransactionBuilder,\n} = IconBuilder;\n\nconst callBuild = ({\n  from,\n  methodName,\n  to,\n  params = {},\n} = {}) => {\n  const callBuilder = new CallBuilder();\n  const obj = callBuilder\n    .from(from)\n    .to(to)\n    .method(methodName)\n    .params(params)\n    .build();\n  return obj;\n};\n\nconst sendTxBuild = ({\n  from,\n  to,\n  methodName,\n  params = {},\n  networkId = window.NID,\n  stepLimit = '0x493e0',\n  value = '0x0',\n} = {}) => {\n  const callTransactionBuilder = new CallTransactionBuilder();\n  const obj = callTransactionBuilder\n    .nid(networkId)\n    .from(from)\n    .to(to)\n    .stepLimit(stepLimit)\n    .value(value)\n    .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n    .method(methodName)\n    .params(params)\n    .version('0x3')\n    .build();\n\n  return {\n    jsonrpc: '2.0',\n    method: 'icx_sendTransaction',\n    params: obj,\n    id: 1,\n  };\n};\n\nexport default {\n  iconService,\n  callBuild,\n  sendTxBuild,\n}","const getAddress = () => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_ADDRESS') {\n        resolve(payload);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_ADDRESS',\n      },\n    }));\n  });\n  \n  \n  const sendTransaction = params => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_JSON-RPC') {\n        resolve(payload.result);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_JSON-RPC',\n        payload: params,\n      },\n    }));\n  });\n  \n  export default {\n    getAddress,\n    sendTransaction,\n  };","export default {\n  'MODE': {\n      'LOG_OUT': 'LOG_OUT',\n      'LOG_IN': 'LOG_IN',\n      'BDAY_SET': 'BDAY_SET', \n  },\n  'LABEL': [\n      {\n          value: '00',\n          label: '시험',\n      },\n      {\n          value: '01',\n          label: '고백',\n      },\n      {\n          value: '02',\n          label: '생일',\n      },\n      {\n          value: '03',\n          label: '졸업',\n      },\n      {\n          value: '04',\n          label: '입학',\n      },\n      {\n          value: '05',\n          label: '방학',\n      },\n      {\n          value: '06',\n          label: '제대',\n      },\n      {\n          value: '07',\n          label: '우리아기 출산',\n      },\n      {\n          value: '08',\n          label: '어머니 생신',\n      },\n      {\n          value: '09',\n          label: '아버지 생신',\n      },\n      {\n          value: '10',\n          label: '남친 생일',\n      },\n      {\n          value: '11',\n          label: '여친 생일',\n      },\n      {\n          value: '12',\n          label: '이별...',\n      },\n      {\n          value: '13',\n          label: '현피',\n      },\n      {\n          value: '14',\n          label: '퇴사',\n      },\n      {\n          value: '15',\n          label: '이직',\n      },\n      {\n          value: '16',\n          label: '여행',\n      },\n      {\n          value: '17',\n          label: '상견례',\n      },\n      {\n          value: '18',\n          label: '결혼식',\n      },\n      {\n          value: '19',\n          label: '상사 장례식',\n      },\n      {\n          value: '20',\n          label: '로또 당첨',\n      },\n      {\n          value: '21',\n          label: '인생 하직',\n      },\n  ]\n}","import React, {useState} from 'react';\nimport { Button, Layout, Row, Col , Input, Card, Select } from 'antd'\n\nimport SDK from 'apis/SDK';\nimport IconexConnect from 'apis/IconexConnect';\nimport CONST from './constants';\n\nimport {\n  IconConverter\n} from 'icon-sdk-js'\n\nconst { Header , Content } = Layout;\n\nfunction hexToBytes(hex) {\n  for (var bytes = [], c = 0; c < hex.length; c += 2)\n    bytes.push(parseInt(hex.substr(c, 2), 16));\n  return bytes;\n}\n\nfunction stringFromUTF8Array(data) {\n  const extraByteMap = [1, 1, 1, 1, 2, 2, 3, 0];\n  var count = data.length;\n  var str = \"\";\n\n  for (var index = 0; index < count;) {\n    var ch = data[index++];\n    if (ch & 0x80) {\n      var extra = extraByteMap[(ch >> 3) & 0x07];\n      if (!(ch & 0x40) || !extra || ((index + extra) > count))\n        return null;\n\n      ch = ch & (0x3F >> extra);\n      for (; extra > 0; extra -= 1) {\n        var chx = data[index++];\n        if ((chx & 0xC0) != 0x80)\n          return null;\n\n        ch = (ch << 6) | (chx & 0x3F);\n      }\n    }\n\n    str += String.fromCharCode(ch);\n  }\n\n  return str;\n}\n\nfunction convertList(myData) {\n  var converted = [];\n  for (var j = 0; j < myData.length; j += 1) {\n    converted.push(stringFromUTF8Array(hexToBytes(myData[j])))\n  }\n  return converted\n}\n\nfunction App() {\n  const [ mode, setMode ] = useState( CONST.MODE['LOG_OUT'])\n  const [ memoInput, setMemoInput ] = useState('')\n  const [ memoList, setmemoList ] = useState([])\n  const [ myAddress, setMyAddress ] = useState('')\n  const [ myData, setMyData ] = useState({ label: '', BDay: '' })\n\n  async function getAddress() { // 로그인\n    const { iconService, callBuild } = SDK\n    const myAddress = await IconexConnect.getAddress()\n    console.log(myAddress)\n    const myData = await iconService.call(\n      callBuild({\n        from: myAddress,\n        methodName: 'get',\n        params: {},\n        to: window.CONTRACT_ADDRESS,\n      })\n    ).execute()\n\n    setmemoList(convertList(myData))\n    setMode(CONST.MODE['LOG_IN'])\n    setMyAddress(myAddress)\n  }\n\n  \n  async function addMemo() {\n\n    if (myAddress === '') {\n      alert(\"Login to Use ToDo-List\")\n      return\n    }\n\n    if (memoInput.trim().length > 0) {\n      setmemoList([memoInput, ...memoList])\n      setMemoInput('')\n\n      const txObj = SDK.sendTxBuild({\n        from: myAddress,\n        to: window.CONTRACT_ADDRESS,\n        methodName: 'set',\n        params: {\n          _hack: IconConverter.fromUtf8(memoInput),\n        },\n      })\n      const tx = await IconexConnect.sendTransaction(txObj)\n\n      if (tx) {\n        alert(\"Compeleted\")\n      }\n    }\n  }\n\n\n  return (\n    <Layout>\n      <Header>\n        <Button type=\"primary\" size=\"large\" onClick={getAddress} type=\"primary\">지갑 연동하기</Button>\n      </Header>\n      <Content>\n        <Row type=\"flex\" justify=\"center\" align=\"middle\" className={`page-wrap`}>\n          <Col span={24}>\n\n            <h1 style={{color: '#ffffff', fontWeight: 900, textAlign: 'right'}}>To-Do List!</h1>\n          </Col>\n          <Col>\n            <div className=\"form-wrap\">\n              <Input size=\"large\" style={{width: 250}} value={memoInput} onChange={(e)=>setMemoInput(e.target.value)}/>\n              <Button size=\"large\" onClick={addMemo}>추가하기</Button>\n            </div>\n          </Col>\n        </Row>\n        <Row type=\"flex\" justify=\"center\" align=\"middle\">\n          <Col span={24} style={{color: 'grey', textAlign: 'center', fontSize: 25, fontWeight: 50, margin: 30}}>Les't get some work done!</Col>\n          <Col span={24} style={{width: '80%', maxWidth: 700 }}>\n            <div>\n              {memoList.map((item) => (\n                <div className=\"list\">{item}</div>\n              ))\n              }\n            </div>\n          </Col>\n        </Row>\n    </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}